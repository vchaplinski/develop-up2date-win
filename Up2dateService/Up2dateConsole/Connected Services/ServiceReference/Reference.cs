//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Up2dateConsole.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Package", Namespace="http://RTSoft.Ritms.Up2date.win")]
    [System.SerializableAttribute()]
    public partial struct Package : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Up2dateConsole.ServiceReference.InstallPackageResult ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilepathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstallDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublisherField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Up2dateConsole.ServiceReference.PackageStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlInfoAboutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> VersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayVersion {
            get {
                return this.DisplayVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayVersionField, value) != true)) {
                    this.DisplayVersionField = value;
                    this.RaisePropertyChanged("DisplayVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Up2dateConsole.ServiceReference.InstallPackageResult ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedSize {
            get {
                return this.EstimatedSizeField;
            }
            set {
                if ((this.EstimatedSizeField.Equals(value) != true)) {
                    this.EstimatedSizeField = value;
                    this.RaisePropertyChanged("EstimatedSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Filepath {
            get {
                return this.FilepathField;
            }
            set {
                if ((object.ReferenceEquals(this.FilepathField, value) != true)) {
                    this.FilepathField = value;
                    this.RaisePropertyChanged("Filepath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstallDate {
            get {
                return this.InstallDateField;
            }
            set {
                if ((object.ReferenceEquals(this.InstallDateField, value) != true)) {
                    this.InstallDateField = value;
                    this.RaisePropertyChanged("InstallDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductCode {
            get {
                return this.ProductCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductCodeField, value) != true)) {
                    this.ProductCodeField = value;
                    this.RaisePropertyChanged("ProductCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Publisher {
            get {
                return this.PublisherField;
            }
            set {
                if ((object.ReferenceEquals(this.PublisherField, value) != true)) {
                    this.PublisherField = value;
                    this.RaisePropertyChanged("Publisher");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Up2dateConsole.ServiceReference.PackageStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UrlInfoAbout {
            get {
                return this.UrlInfoAboutField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlInfoAboutField, value) != true)) {
                    this.UrlInfoAboutField = value;
                    this.RaisePropertyChanged("UrlInfoAbout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InstallPackageResult", Namespace="http://schemas.datacontract.org/2004/07/Up2dateShared")]
    public enum InstallPackageResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PackageNotSupported = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PackageUnavailable = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailedToInstallChocoPackage = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GeneralInstallationError = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ChocoNotInstalled = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SignatureVerificationFailed = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RestartNeeded = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CannotStartInstaller = 8,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PackageStatus", Namespace="http://RTSoft.Ritms.Up2date.win")]
    public enum PackageStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unavailable = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Available = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Downloading = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Downloaded = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Installing = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Installed = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RestartNeeded = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemInfo", Namespace="http://RTSoft.Ritms.Up2date.win")]
    [System.SerializableAttribute()]
    public partial struct SystemInfo : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool Is64BitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Up2dateConsole.ServiceReference.PlatformID PlatformIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServicePackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Up2dateConsole.ServiceReference.Version VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionStringField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Is64Bit {
            get {
                return this.Is64BitField;
            }
            set {
                if ((this.Is64BitField.Equals(value) != true)) {
                    this.Is64BitField = value;
                    this.RaisePropertyChanged("Is64Bit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineName {
            get {
                return this.MachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineNameField, value) != true)) {
                    this.MachineNameField = value;
                    this.RaisePropertyChanged("MachineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Up2dateConsole.ServiceReference.PlatformID PlatformID {
            get {
                return this.PlatformIDField;
            }
            set {
                if ((this.PlatformIDField.Equals(value) != true)) {
                    this.PlatformIDField = value;
                    this.RaisePropertyChanged("PlatformID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServicePack {
            get {
                return this.ServicePackField;
            }
            set {
                if ((object.ReferenceEquals(this.ServicePackField, value) != true)) {
                    this.ServicePackField = value;
                    this.RaisePropertyChanged("ServicePack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Up2dateConsole.ServiceReference.Version Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionString {
            get {
                return this.VersionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionStringField, value) != true)) {
                    this.VersionStringField = value;
                    this.RaisePropertyChanged("VersionString");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Version", Namespace="http://schemas.datacontract.org/2004/07/System")]
    [System.SerializableAttribute()]
    public partial class Version : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int _BuildField;
        
        private int _MajorField;
        
        private int _MinorField;
        
        private int _RevisionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _Build {
            get {
                return this._BuildField;
            }
            set {
                if ((this._BuildField.Equals(value) != true)) {
                    this._BuildField = value;
                    this.RaisePropertyChanged("_Build");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _Major {
            get {
                return this._MajorField;
            }
            set {
                if ((this._MajorField.Equals(value) != true)) {
                    this._MajorField = value;
                    this.RaisePropertyChanged("_Major");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _Minor {
            get {
                return this._MinorField;
            }
            set {
                if ((this._MinorField.Equals(value) != true)) {
                    this._MinorField = value;
                    this.RaisePropertyChanged("_Minor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _Revision {
            get {
                return this._RevisionField;
            }
            set {
                if ((this._RevisionField.Equals(value) != true)) {
                    this._RevisionField = value;
                    this.RaisePropertyChanged("_Revision");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformID", Namespace="http://schemas.datacontract.org/2004/07/System")]
    public enum PlatformID : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Win32S = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Win32Windows = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Win32NT = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WinCE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unix = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MacOSX = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientState", Namespace="http://RTSoft.Ritms.Up2date.win")]
    [System.SerializableAttribute()]
    public partial struct ClientState : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Up2dateConsole.ServiceReference.ClientStatus StatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastError {
            get {
                return this.LastErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.LastErrorField, value) != true)) {
                    this.LastErrorField = value;
                    this.RaisePropertyChanged("LastError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Up2dateConsole.ServiceReference.ClientStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientStatus", Namespace="http://schemas.datacontract.org/2004/07/Up2dateShared")]
    public enum ClientStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stopped = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CannotAccessServer = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Running = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoCertificate = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultOfstring", Namespace="http://RTSoft.Ritms.Up2date.win")]
    [System.SerializableAttribute()]
    public partial struct ResultOfstring : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SignatureVerificationLevel", Namespace="http://schemas.datacontract.org/2004/07/Up2dateShared")]
    public enum SignatureVerificationLevel : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SignedByAnyCertificate = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SignedByTrustedCertificate = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SignedByWhitelistedCertificate = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://RTSoft.Ritms.Up2date.win")]
    [System.SerializableAttribute()]
    public partial struct Result : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IWcfService")]
    public interface IWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetPackages", ReplyAction="http://tempuri.org/IWcfService/GetPackagesResponse")]
        Up2dateConsole.ServiceReference.Package[] GetPackages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetPackages", ReplyAction="http://tempuri.org/IWcfService/GetPackagesResponse")]
        System.Threading.Tasks.Task<Up2dateConsole.ServiceReference.Package[]> GetPackagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/StartInstallation", ReplyAction="http://tempuri.org/IWcfService/StartInstallationResponse")]
        void StartInstallation(Up2dateConsole.ServiceReference.Package[] packages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/StartInstallation", ReplyAction="http://tempuri.org/IWcfService/StartInstallationResponse")]
        System.Threading.Tasks.Task StartInstallationAsync(Up2dateConsole.ServiceReference.Package[] packages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetSystemInfo", ReplyAction="http://tempuri.org/IWcfService/GetSystemInfoResponse")]
        Up2dateConsole.ServiceReference.SystemInfo GetSystemInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetSystemInfo", ReplyAction="http://tempuri.org/IWcfService/GetSystemInfoResponse")]
        System.Threading.Tasks.Task<Up2dateConsole.ServiceReference.SystemInfo> GetSystemInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetMsiFolder", ReplyAction="http://tempuri.org/IWcfService/GetMsiFolderResponse")]
        string GetMsiFolder();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetMsiFolder", ReplyAction="http://tempuri.org/IWcfService/GetMsiFolderResponse")]
        System.Threading.Tasks.Task<string> GetMsiFolderAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetClientState", ReplyAction="http://tempuri.org/IWcfService/GetClientStateResponse")]
        Up2dateConsole.ServiceReference.ClientState GetClientState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetClientState", ReplyAction="http://tempuri.org/IWcfService/GetClientStateResponse")]
        System.Threading.Tasks.Task<Up2dateConsole.ServiceReference.ClientState> GetClientStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetDeviceId", ReplyAction="http://tempuri.org/IWcfService/GetDeviceIdResponse")]
        string GetDeviceId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetDeviceId", ReplyAction="http://tempuri.org/IWcfService/GetDeviceIdResponse")]
        System.Threading.Tasks.Task<string> GetDeviceIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/IsCertificateAvailable", ReplyAction="http://tempuri.org/IWcfService/IsCertificateAvailableResponse")]
        bool IsCertificateAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/IsCertificateAvailable", ReplyAction="http://tempuri.org/IWcfService/IsCertificateAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsCertificateAvailableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/RequestCertificate", ReplyAction="http://tempuri.org/IWcfService/RequestCertificateResponse")]
        Up2dateConsole.ServiceReference.ResultOfstring RequestCertificate(string oneTimeKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/RequestCertificate", ReplyAction="http://tempuri.org/IWcfService/RequestCertificateResponse")]
        System.Threading.Tasks.Task<Up2dateConsole.ServiceReference.ResultOfstring> RequestCertificateAsync(string oneTimeKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetRequestCertificateUrl", ReplyAction="http://tempuri.org/IWcfService/GetRequestCertificateUrlResponse")]
        string GetRequestCertificateUrl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetRequestCertificateUrl", ReplyAction="http://tempuri.org/IWcfService/GetRequestCertificateUrlResponse")]
        System.Threading.Tasks.Task<string> GetRequestCertificateUrlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/SetRequestCertificateUrl", ReplyAction="http://tempuri.org/IWcfService/SetRequestCertificateUrlResponse")]
        void SetRequestCertificateUrl(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/SetRequestCertificateUrl", ReplyAction="http://tempuri.org/IWcfService/SetRequestCertificateUrlResponse")]
        System.Threading.Tasks.Task SetRequestCertificateUrlAsync(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetProvisioningUrl", ReplyAction="http://tempuri.org/IWcfService/GetProvisioningUrlResponse")]
        string GetProvisioningUrl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetProvisioningUrl", ReplyAction="http://tempuri.org/IWcfService/GetProvisioningUrlResponse")]
        System.Threading.Tasks.Task<string> GetProvisioningUrlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/SetProvisioningUrl", ReplyAction="http://tempuri.org/IWcfService/SetProvisioningUrlResponse")]
        void SetProvisioningUrl(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/SetProvisioningUrl", ReplyAction="http://tempuri.org/IWcfService/SetProvisioningUrlResponse")]
        System.Threading.Tasks.Task SetProvisioningUrlAsync(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetCheckSignature", ReplyAction="http://tempuri.org/IWcfService/GetCheckSignatureResponse")]
        bool GetCheckSignature();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetCheckSignature", ReplyAction="http://tempuri.org/IWcfService/GetCheckSignatureResponse")]
        System.Threading.Tasks.Task<bool> GetCheckSignatureAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/SetCheckSignature", ReplyAction="http://tempuri.org/IWcfService/SetCheckSignatureResponse")]
        void SetCheckSignature(bool newState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/SetCheckSignature", ReplyAction="http://tempuri.org/IWcfService/SetCheckSignatureResponse")]
        System.Threading.Tasks.Task SetCheckSignatureAsync(bool newState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetSignatureVerificationLevel", ReplyAction="http://tempuri.org/IWcfService/GetSignatureVerificationLevelResponse")]
        Up2dateConsole.ServiceReference.SignatureVerificationLevel GetSignatureVerificationLevel();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetSignatureVerificationLevel", ReplyAction="http://tempuri.org/IWcfService/GetSignatureVerificationLevelResponse")]
        System.Threading.Tasks.Task<Up2dateConsole.ServiceReference.SignatureVerificationLevel> GetSignatureVerificationLevelAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/SetSignatureVerificationLevel", ReplyAction="http://tempuri.org/IWcfService/SetSignatureVerificationLevelResponse")]
        void SetSignatureVerificationLevel(Up2dateConsole.ServiceReference.SignatureVerificationLevel level);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/SetSignatureVerificationLevel", ReplyAction="http://tempuri.org/IWcfService/SetSignatureVerificationLevelResponse")]
        System.Threading.Tasks.Task SetSignatureVerificationLevelAsync(Up2dateConsole.ServiceReference.SignatureVerificationLevel level);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/IsCertificateValidAndTrusted", ReplyAction="http://tempuri.org/IWcfService/IsCertificateValidAndTrustedResponse")]
        bool IsCertificateValidAndTrusted(string certificateFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/IsCertificateValidAndTrusted", ReplyAction="http://tempuri.org/IWcfService/IsCertificateValidAndTrustedResponse")]
        System.Threading.Tasks.Task<bool> IsCertificateValidAndTrustedAsync(string certificateFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetWhitelistedCertificates", ReplyAction="http://tempuri.org/IWcfService/GetWhitelistedCertificatesResponse")]
        string[] GetWhitelistedCertificates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetWhitelistedCertificates", ReplyAction="http://tempuri.org/IWcfService/GetWhitelistedCertificatesResponse")]
        System.Threading.Tasks.Task<string[]> GetWhitelistedCertificatesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/AddCertificateToWhitelist", ReplyAction="http://tempuri.org/IWcfService/AddCertificateToWhitelistResponse")]
        Up2dateConsole.ServiceReference.Result AddCertificateToWhitelist(string certificateFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/AddCertificateToWhitelist", ReplyAction="http://tempuri.org/IWcfService/AddCertificateToWhitelistResponse")]
        System.Threading.Tasks.Task<Up2dateConsole.ServiceReference.Result> AddCertificateToWhitelistAsync(string certificateFilePath);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfServiceChannel : Up2dateConsole.ServiceReference.IWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfServiceClient : System.ServiceModel.ClientBase<Up2dateConsole.ServiceReference.IWcfService>, Up2dateConsole.ServiceReference.IWcfService {
        
        public WcfServiceClient() {
        }
        
        public WcfServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WcfServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Up2dateConsole.ServiceReference.Package[] GetPackages() {
            return base.Channel.GetPackages();
        }
        
        public System.Threading.Tasks.Task<Up2dateConsole.ServiceReference.Package[]> GetPackagesAsync() {
            return base.Channel.GetPackagesAsync();
        }
        
        public void StartInstallation(Up2dateConsole.ServiceReference.Package[] packages) {
            base.Channel.StartInstallation(packages);
        }
        
        public System.Threading.Tasks.Task StartInstallationAsync(Up2dateConsole.ServiceReference.Package[] packages) {
            return base.Channel.StartInstallationAsync(packages);
        }
        
        public Up2dateConsole.ServiceReference.SystemInfo GetSystemInfo() {
            return base.Channel.GetSystemInfo();
        }
        
        public System.Threading.Tasks.Task<Up2dateConsole.ServiceReference.SystemInfo> GetSystemInfoAsync() {
            return base.Channel.GetSystemInfoAsync();
        }
        
        public string GetMsiFolder() {
            return base.Channel.GetMsiFolder();
        }
        
        public System.Threading.Tasks.Task<string> GetMsiFolderAsync() {
            return base.Channel.GetMsiFolderAsync();
        }
        
        public Up2dateConsole.ServiceReference.ClientState GetClientState() {
            return base.Channel.GetClientState();
        }
        
        public System.Threading.Tasks.Task<Up2dateConsole.ServiceReference.ClientState> GetClientStateAsync() {
            return base.Channel.GetClientStateAsync();
        }
        
        public string GetDeviceId() {
            return base.Channel.GetDeviceId();
        }
        
        public System.Threading.Tasks.Task<string> GetDeviceIdAsync() {
            return base.Channel.GetDeviceIdAsync();
        }
        
        public bool IsCertificateAvailable() {
            return base.Channel.IsCertificateAvailable();
        }
        
        public System.Threading.Tasks.Task<bool> IsCertificateAvailableAsync() {
            return base.Channel.IsCertificateAvailableAsync();
        }
        
        public Up2dateConsole.ServiceReference.ResultOfstring RequestCertificate(string oneTimeKey) {
            return base.Channel.RequestCertificate(oneTimeKey);
        }
        
        public System.Threading.Tasks.Task<Up2dateConsole.ServiceReference.ResultOfstring> RequestCertificateAsync(string oneTimeKey) {
            return base.Channel.RequestCertificateAsync(oneTimeKey);
        }
        
        public string GetRequestCertificateUrl() {
            return base.Channel.GetRequestCertificateUrl();
        }
        
        public System.Threading.Tasks.Task<string> GetRequestCertificateUrlAsync() {
            return base.Channel.GetRequestCertificateUrlAsync();
        }
        
        public void SetRequestCertificateUrl(string url) {
            base.Channel.SetRequestCertificateUrl(url);
        }
        
        public System.Threading.Tasks.Task SetRequestCertificateUrlAsync(string url) {
            return base.Channel.SetRequestCertificateUrlAsync(url);
        }
        
        public string GetProvisioningUrl() {
            return base.Channel.GetProvisioningUrl();
        }
        
        public System.Threading.Tasks.Task<string> GetProvisioningUrlAsync() {
            return base.Channel.GetProvisioningUrlAsync();
        }
        
        public void SetProvisioningUrl(string url) {
            base.Channel.SetProvisioningUrl(url);
        }
        
        public System.Threading.Tasks.Task SetProvisioningUrlAsync(string url) {
            return base.Channel.SetProvisioningUrlAsync(url);
        }
        
        public bool GetCheckSignature() {
            return base.Channel.GetCheckSignature();
        }
        
        public System.Threading.Tasks.Task<bool> GetCheckSignatureAsync() {
            return base.Channel.GetCheckSignatureAsync();
        }
        
        public void SetCheckSignature(bool newState) {
            base.Channel.SetCheckSignature(newState);
        }
        
        public System.Threading.Tasks.Task SetCheckSignatureAsync(bool newState) {
            return base.Channel.SetCheckSignatureAsync(newState);
        }
        
        public Up2dateConsole.ServiceReference.SignatureVerificationLevel GetSignatureVerificationLevel() {
            return base.Channel.GetSignatureVerificationLevel();
        }
        
        public System.Threading.Tasks.Task<Up2dateConsole.ServiceReference.SignatureVerificationLevel> GetSignatureVerificationLevelAsync() {
            return base.Channel.GetSignatureVerificationLevelAsync();
        }
        
        public void SetSignatureVerificationLevel(Up2dateConsole.ServiceReference.SignatureVerificationLevel level) {
            base.Channel.SetSignatureVerificationLevel(level);
        }
        
        public System.Threading.Tasks.Task SetSignatureVerificationLevelAsync(Up2dateConsole.ServiceReference.SignatureVerificationLevel level) {
            return base.Channel.SetSignatureVerificationLevelAsync(level);
        }
        
        public bool IsCertificateValidAndTrusted(string certificateFilePath) {
            return base.Channel.IsCertificateValidAndTrusted(certificateFilePath);
        }
        
        public System.Threading.Tasks.Task<bool> IsCertificateValidAndTrustedAsync(string certificateFilePath) {
            return base.Channel.IsCertificateValidAndTrustedAsync(certificateFilePath);
        }
        
        public string[] GetWhitelistedCertificates() {
            return base.Channel.GetWhitelistedCertificates();
        }
        
        public System.Threading.Tasks.Task<string[]> GetWhitelistedCertificatesAsync() {
            return base.Channel.GetWhitelistedCertificatesAsync();
        }
        
        public Up2dateConsole.ServiceReference.Result AddCertificateToWhitelist(string certificateFilePath) {
            return base.Channel.AddCertificateToWhitelist(certificateFilePath);
        }
        
        public System.Threading.Tasks.Task<Up2dateConsole.ServiceReference.Result> AddCertificateToWhitelistAsync(string certificateFilePath) {
            return base.Channel.AddCertificateToWhitelistAsync(certificateFilePath);
        }
    }
}
